val ifb =
  SLURMEnvironment(
    "nverstraete",
    "core.cluster.france-bioinformatique.fr",
    sharedDirectory = "/shared/projects/modellingtme",
    workDirectory = "/tmp/",
    qos = "fast"
  )

// Inputs
val mySeed = Val[Int]
val simulationDuration = Val[Int]
val zMax = Val[Int]
val coef = Val[Int]
val density = Val[Double]
val nbCancerCellsInit = Val[Int]
val propMonocytesInit = Val[Double]
val apoptosisThreshold = Val[Double]
val deathThreshold = Val[Double]



// Paramaters to calibrate
val apoCellsMovementProba = Val[Int]
val needSigCellsMvtProba = Val[Int]
val layersAroundNLC = Val[Int]
val alpha = Val[Int]
val monoPhagoEff = Val[Int]
val NLCPhagoEff = Val[Int]
val M2PhagoEff = Val[Int]
val M2KillEff = Val[Int]
val cllSensingDistance = Val[Int]
val monocyteSensingDistance = Val[Int]
val nlcSensingDistance = Val[Int]
val macrophageSensingDistance = Val[Int]
val diffTime = Val[Int]
val diffTimeStd = Val[Int]
val nLCThreshold = Val[Int]
val signalInitMean = Val[Int]
val signalInitStd = Val[Int]


// Experimental Data
val dataFile = Val[File]

// Outputs
val nbNeedSignalCancerCells = Val[Double]
val nbLateApoCancerCells = Val[Double]
val nbMonocytes = Val[Double]
val nbMonocytesInit = Val[Double]
val nbNurseLikeCells = Val[Double]
val nbDeadCancerCells = Val[Double]
val viability = Val[Double]
val remainingCellsRatio = Val[Double]
val nlcFraction = Val[Double]
val simulatedViabilityVector = Val[Array[Double]]
val simulatedConcentrationVector = Val[Array[Double]]
val simulatedNLCFractionVector = Val[Array[Double]]
val fitnessVia = Val[Double]
val fitnessConc = Val[Double]
val fitnessNLC = Val[Double]
val fitnessGlobal = Val[Double]


val launch = List(
    "headless-setup",
    "while [ ticks < simulation-duration * 24 and count NeedSignalCancerCells + count LateApoCancerCells  > 0] [ headless-go ]",
    )

// The model definition            
def modelTask(monoInit: Double, simuDur: Int) =
    NetLogo6Task(workDirectory / "ABM_NLC_CLL.nlogo3d", launch, embedWorkspace = false, switch3d = true, seed = mySeed) set( 
        inputs += mySeed mapped "my-seed",
        inputs += simulationDuration mapped "simulation-duration",
        inputs += zMax mapped "z-max",
        inputs += coef mapped "coef",
        inputs += nbCancerCellsInit mapped "nb-cancer-cells-init",
        inputs += propMonocytesInit mapped "prop-monocytes-init",
        inputs += density mapped "density",
        inputs += nLCThreshold mapped "nlc-threshold",
        inputs += apoptosisThreshold mapped "apoptosis-threshold",
        inputs += deathThreshold mapped "death-threshold",
        inputs += diffTime mapped "adherence-time", 
        inputs += diffTimeStd mapped "adherence-init-std", 
        inputs += signalInitMean mapped "signal-init-mean", 
        inputs += signalInitStd mapped "signal-init-std", 
        inputs += apoCellsMovementProba mapped "apo-cells-movement-proba",
        inputs += needSigCellsMvtProba mapped "need-sig-cells-mvt-proba",
        inputs += layersAroundNLC mapped "layers-around-nlc",
        inputs += alpha mapped "alpha",
        inputs += monoPhagoEff mapped "mono-phago-eff",
        inputs += NLCPhagoEff mapped "NLC-phago-eff",
        inputs += M2PhagoEff mapped "M2-phago-eff", 
        inputs += M2KillEff mapped "M2-kill-eff", 
        inputs += cllSensingDistance mapped "cll-sensing-distance",
        inputs += monocyteSensingDistance mapped "monocyte-sensing-distance",
        inputs += nlcSensingDistance mapped "nlc-sensing-distance",
        inputs += macrophageSensingDistance mapped "macrophage-sensing-distance",

        outputs += simulatedViabilityVector mapped "ts-Viability",
        outputs += simulatedConcentrationVector mapped "ts-Concentration",
  
        //Default values. Can be removed if OpenMOLEÂ Vals are set by values coming from the workflow
        simulationDuration := simuDur,
        zMax := 0,
        coef := 1,
        nbCancerCellsInit := 1000,
        propMonocytesInit := monoInit,
        density := 55,
        apoptosisThreshold := 0,
        deathThreshold := -500,
    )

val fitnessTask = ScalaTask("""
    
    // get the experimental real dataFile
    val columns = dataFile.lines.drop(1).map(_.split(",")).toVector

    val realViabilityVector = columns.map(_(1).toDouble)
    val realConcentrationVector = columns.map(_(2).toDouble)
    
    val simulatedViabilityVector = simulatedViabilityVector.toVector
    val simulatedConcentrationVector = simulatedConcentrationVector.toVector
    
    // fitness calculation on viability
    def fitnessViability(realViability: Vector[Double], simuViability: Vector[Double]) = {
        (realViability zip simuViability).map { case(r, s) => (r - s) * (r - s) }.sum
    }
    
    // fitness calculation on concentration
    def fitnessConcentration(realConcentration: Vector[Double], simuConcentration: Vector[Double]) = {
        (realConcentration zip simuConcentration).map { case(r, s) => (r - s) * (r - s) }.sum
    }
    
    val fitnessVia = fitnessViability(realViabilityVector, simulatedViabilityVector)
    val fitnessConc = fitnessConcentration(realConcentrationVector, simulatedConcentrationVector)

""") set (
    dataFile := (workDirectory / "expData.csv"),
    inputs += dataFile,
    inputs += (simulatedViabilityVector,simulatedConcentrationVector),
    outputs += (fitnessVia, fitnessConc)
)

def calib(simuDur: Int) = {
    NSGA2Evolution(
        evaluation = modelTask(1.6, simuDur) -- fitnessTask,
        genome = Seq(
        apoCellsMovementProba in (0,10),
        needSigCellsMvtProba in (1,10),
        layersAroundNLC in (1,2),
        alpha in (0,50),
        monoPhagoEff in (0,10),
        NLCPhagoEff in (0,10),
        M2PhagoEff in (0,10),
        M2KillEff in (0,5),
        cllSensingDistance in (1,3),
        monocyteSensingDistance in (1,3),
        nlcSensingDistance in (1,3),
        macrophageSensingDistance in (1,3),
        nLCThreshold in (100,150), 
        signalInitMean in (50,100),
        signalInitStd in (0,50),
        diffTime in (48,96),  
        diffTimeStd in (0,48)
        ),
        objective = Seq(fitnessVia, fitnessConc),
        stochastic = Stochastic(seed = mySeed),
        parallelism = 350,
        termination = 20000,
        distribution = Island(5 minutes),
    ) on ifb hook(workDirectory / "ABM_10_stochastic_1_equivalentFitnesses_3", 1)
}

calib(13) 
